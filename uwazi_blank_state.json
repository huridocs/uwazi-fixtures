{"docs": [ {"_id":"081cfd32536a2da33970ca836200cea4","type":"user","username":"admin2","password":"1c142b2d01aa34e9a36bde480645a57fd69e14155dacfab5a3f9257b77fdc8d8"},{"_id":"_design/documents","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'document')\t\n  emit(doc._id, doc);\n}"},"list":{"map":"function(doc) {\nif(doc.type === 'document')\t\n  emit(doc._id, {title: doc.title, _id:doc._id, _rev:doc._rev});\n}"},"uploads":{"map":"function(doc) {\nif(doc.type === 'document' && !doc.published)\t\n  emit(doc.user._id, {title: doc.title, _id:doc._id, _rev:doc._rev, creationDate: doc.creationDate, processed: doc.processed, uploaded: doc.uploaded || false, metadata:doc.metadata, template:doc.template});\n}"},"metadata_by_template":{"map":"function(doc) {\n  if(doc.type === 'document' && doc.template) {\n    emit(doc.template, {_id: doc._id, metadata: doc.metadata});\n  }\n}"},"count_by_template":{"map":"function(doc) {\n\tif(doc.type === 'document' && doc.template)\n\t\temit(doc.template, 1);\n}","reduce":"_sum"},"docs":{"map":"function(doc) {\nif(doc.type === 'document')\n  var newDoc = {};\t\n  for(var k in doc) {\n   if(k !== 'fullText' && k !== 'file') {\n    newDoc[k]=doc[k];\n   }\t\n  }\n \t\t\n  emit(doc._id, newDoc);\n}"}},"updates":{"partialUpdate":"function(doc, req) { if (!doc) { return [ null, JSON.stringify({ status: 'nodoc' }) ]; } _ref = JSON.parse(req.body); for (k in _ref) { v = _ref[k]; if (k[0] === '/') { nestedDoc = doc; nestedKeys = k.split('/'); _ref1 = nestedKeys.slice(1, -1); for (_i = 0, _len = _ref1.length; _i < _len; _i++) { nestedKey = _ref1[_i]; nestedDoc = ((_ref2 = nestedDoc[nestedKey]) != null ? _ref2 : nestedDoc[nestedKey] = {}); } k = nestedKeys.slice(-1)[0]; if (v === '__delete__') { delete nestedDoc[k]; } else { nestedDoc[k] = v; } continue; } if (v === '__delete__') { delete doc[k]; } else { doc[k] = v; } } return [ doc, JSON.stringify({id:doc._id}) ]; }"}},{"_id":"_design/entities","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'entity')\t\n  emit(doc._id, doc);\n}"},"list":{"map":"function(doc) {\nif(doc.type === 'entity')\t\n  emit(doc._id, {title: doc.title, _id:doc._id, _rev:doc._rev});\n}"},"uploads":{"map":"function(doc) {\nif(doc.type === 'entity' && !doc.published)\t\n  emit(doc.user._id, doc);\n}"},"metadata_by_template":{"map":"function(doc) {\n  if(doc.type === 'entity' && doc.template) {\n    emit(doc.template, {_id: doc._id, metadata: doc.metadata});\n  }\n}"},"by_template":{"map":"function(doc) {\n  if(doc.type === 'entity' && doc.template) {\n    emit([doc.template, doc.language], {_id: doc._id, sharedId: doc.sharedId, title: doc.title, icon: doc.icon});\n  }\n}"},"count_by_template":{"map":"function(doc) {\n\tif(doc.type === 'entity' && doc.template)\n\t\temit(doc.template, 1);\n}","reduce":"_sum"},"by_language":{"map":"function(doc) {\nif(doc.type === 'entity')\t\n  emit([doc.sharedId, doc.language], doc);\n}"}},"updates":{"partialUpdate":"function(doc, req) { if (!doc) { return [ null, JSON.stringify({ status: 'nodoc' }) ]; } _ref = JSON.parse(req.body); for (k in _ref) { v = _ref[k]; if (k[0] === '/') { nestedDoc = doc; nestedKeys = k.split('/'); _ref1 = nestedKeys.slice(1, -1); for (_i = 0, _len = _ref1.length; _i < _len; _i++) { nestedKey = _ref1[_i]; nestedDoc = ((_ref2 = nestedDoc[nestedKey]) != null ? _ref2 : nestedDoc[nestedKey] = {}); } k = nestedKeys.slice(-1)[0]; if (v === '__delete__') { delete nestedDoc[k]; } else { nestedDoc[k] = v; } continue; } if (v === '__delete__') { delete doc[k]; } else { doc[k] = v; } } return [ doc, JSON.stringify({id:doc._id}) ]; }"}},{"_id":"_design/entities_and_docs","language":"javascript","views":{"by_language":{"map":"function(doc) {\nif(doc.type === 'entity' || doc.type === 'document')\t\n  emit([doc.sharedId, doc.language], doc);\n}"},"sharedId":{"map":"function(doc) {\nif(doc.type === 'entity' || doc.type === 'document')\t\n  emit(doc.sharedId, doc);\n}"}}},{"_id":"_design/pages","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'page')\t\n  emit(doc._id, doc);\n}"},"list":{"map":"function(doc) {\nif(doc.type === 'page')\t\n  emit(doc.language, {title: doc.title, _id:doc._id, _rev:doc._rev, sharedId: doc.sharedId});\n}"},"by_language":{"map":"function(doc) {\nif(doc.type === 'page')\t\n  emit([doc.sharedId, doc.language], doc);\n}"},"sharedId":{"map":"function(doc) {\nif(doc.type === 'page')\t\n  emit(doc.sharedId, doc);\n}"}},"updates":{"partialUpdate":"function(doc, req) { if (!doc) { return [ null, JSON.stringify({ status: 'nodoc' }) ]; } _ref = JSON.parse(req.body); for (k in _ref) { v = _ref[k]; if (k[0] === '/') { nestedDoc = doc; nestedKeys = k.split('/'); _ref1 = nestedKeys.slice(1, -1); for (_i = 0, _len = _ref1.length; _i < _len; _i++) { nestedKey = _ref1[_i]; nestedDoc = ((_ref2 = nestedDoc[nestedKey]) != null ? _ref2 : nestedDoc[nestedKey] = {}); } k = nestedKeys.slice(-1)[0]; if (v === '__delete__') { delete nestedDoc[k]; } else { nestedDoc[k] = v; } continue; } if (v === '__delete__') { delete doc[k]; } else { doc[k] = v; } } return [ doc, JSON.stringify({id:doc._id}) ]; }"}},{"_id":"_design/recoverpassword","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'recoverpassword')\t\n  emit(doc.key, doc);\n}"}}},{"_id":"_design/references","language":"javascript","views":{"by_source":{"map":"function(doc) {\n  if(doc.type == 'reference'){\n    emit(doc.sourceDocument, doc);\n  } \n}"},"by_target":{"map":"function(doc) {\n  if(doc.type == 'reference'){\n    emit(doc.targetDocument, doc);\n  } \n}"},"all":{"map":"function(doc) {\nif(doc.type === 'reference')\t\n  emit(doc._id, doc);\n}"},"count_by_relation_type":{"map":"function(doc) {\nif(doc.type === 'reference' && doc.relationtype)\t\n  emit(doc.relationtype, 1);\n}","reduce":"_sum"},"by_document":{"map":"function(doc) {\n  if(doc.type == 'reference'){\n    emit(doc.targetDocument, doc);\n    emit(doc.sourceDocument, doc);\t\n  } \n}"}}},{"_id":"_design/relationtypes","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'relationtype')\t\n  emit(doc._id, doc);\n}"}}},{"_id":"_design/search","language":"javascript","views":{"list":{"map":"function(doc) {\nif(doc.type === 'document' || doc.type === 'entity')\t\n  emit(doc._id, {title: doc.title, _id:doc._id, _rev:doc._rev});\n}"},"uploads":{"map":"function(doc) {\nif((doc.type === 'document' || doc.type === 'entity') && !doc.published)\t\n  emit([doc.user._id, doc.language], {type: doc.type, title: doc.title, sharedId: doc.sharedId, _id:doc._id, _rev:doc._rev, icon: doc.icon || {}, creationDate: doc.creationDate, processed: doc.processed, uploaded: doc.uploaded || false, metadata:doc.metadata, template:doc.template});\n}"},"count_by_template":{"map":"function(doc) {\n\tif((doc.type === 'document' || doc.type === 'entity') && doc.template)\n\t\temit(doc.template, 1);\n}","reduce":"_sum"}}},{"_id":"_design/settings","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'settings')\t\n  emit(doc._id, doc);\n}"}},"updates":{"partialUpdate":"function(doc, req) { if (!doc) { return [ null, JSON.stringify({ status: 'nodoc' }) ]; } _ref = JSON.parse(req.body); for (k in _ref) { v = _ref[k]; if (k[0] === '/') { nestedDoc = doc; nestedKeys = k.split('/'); _ref1 = nestedKeys.slice(1, -1); for (_i = 0, _len = _ref1.length; _i < _len; _i++) { nestedKey = _ref1[_i]; nestedDoc = ((_ref2 = nestedDoc[nestedKey]) != null ? _ref2 : nestedDoc[nestedKey] = {}); } k = nestedKeys.slice(-1)[0]; if (v === '__delete__') { delete nestedDoc[k]; } else { nestedDoc[k] = v; } continue; } if (v === '__delete__') { delete doc[k]; } else { doc[k] = v; } } return [ doc, JSON.stringify({id:doc._id}) ]; }"}},{"_id":"_design/templates","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'template')\t\n  emit(doc._id, doc);\n}"},"count_by_thesauri":{"map":"function(doc) {\nif(doc.type === 'template')\t\n  doc.properties.forEach(function(property){ if(property.content){emit(property.content, 1);}})\n}","reduce":"_sum"},"select_options":{"map":"function(doc) {\nif(doc.type === 'thesauri')\t\n  emit(doc._id, {_id: doc._id, name: doc.name, type: 'thesauri'});\nif(doc.type === 'entity') \n  emit(doc._id, {_id: doc._id, name: doc.title, type: 'entity'})\n}"}}},{"_id":"_design/thesauris","language":"javascript","views":{"dictionaries":{"map":"function(doc) {\nif(doc.type === 'thesauri')\t\n  emit(doc._id, doc);\n}"},"all":{"map":"function(doc) {\nif(doc.type === 'thesauri' || (doc.type === 'template' && doc.isEntity))\t\n  emit(doc._id, doc);\n}"},"byName":{"map":"function(doc) {\nif(doc.type === 'thesauri')\t\n  emit(doc.name, doc._id);\n}"}}},{"_id":"_design/translations","language":"javascript","views":{"all":{"map":"function(doc) {\nif(doc.type === 'translation')\t\n  emit(doc._id, doc);\n}"}},"updates":{"partialUpdate":"function(doc, req) { if (!doc) { return [ null, JSON.stringify({ status: 'nodoc' }) ]; } _ref = JSON.parse(req.body); for (k in _ref) { v = _ref[k]; if (k[0] === '/') { nestedDoc = doc; nestedKeys = k.split('/'); _ref1 = nestedKeys.slice(1, -1); for (_i = 0, _len = _ref1.length; _i < _len; _i++) { nestedKey = _ref1[_i]; nestedDoc = ((_ref2 = nestedDoc[nestedKey]) != null ? _ref2 : nestedDoc[nestedKey] = {}); } k = nestedKeys.slice(-1)[0]; if (v === '__delete__') { delete nestedDoc[k]; } else { nestedDoc[k] = v; } continue; } if (v === '__delete__') { delete doc[k]; } else { doc[k] = v; } } return [ doc, JSON.stringify({id:doc._id}) ]; }"}},{"_id":"_design/users","language":"javascript","views":{"users":{"map":"function(doc) {\n  if(doc.type == 'user'){\n    emit(doc.username+doc.password, null);\n  }\n\n}"},"all":{"map":"function(doc) {\nif(doc.type === 'user')\t\n  emit(doc._id, doc);\n}"}}},{"_id":"c08ef2532f0bd008ac5174b45e033c93","type":"user","password":"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918","username":"admin"}]}
